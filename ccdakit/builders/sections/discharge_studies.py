"""Hospital Discharge Studies Summary Section builder for C-CDA documents."""

from typing import Sequence

from lxml import etree

from ccdakit.builders.common import Code
from ccdakit.builders.entries.result import ResultOrganizer
from ccdakit.core.base import CDAElement, CDAVersion, TemplateConfig
from ccdakit.protocols.discharge_studies import DischargeStudyOrganizerProtocol


# CDA namespace
NS = "urn:hl7-org:v3"


class HospitalDischargeStudiesSummarySection(CDAElement):
    """
    Builder for C-CDA Hospital Discharge Studies Summary Section.

    This section records the results of observations generated by laboratories,
    imaging procedures, and other procedures at discharge. The scope includes
    hematology, chemistry, serology, virology, toxicology, microbiology, plain
    x-ray, ultrasound, CT, MRI, angiography, echocardiography, nuclear medicine,
    pathology, and procedure observations.

    Implements Hospital Discharge Studies Summary Section (template 2.16.840.1.113883.10.20.22.2.16).

    Key features:
    - Groups discharge studies by panel/organizer
    - Displays study name, value, unit, interpretation, and reference range
    - Supports LOINC codes for study identification
    - Reuses Result Organizer entry pattern for consistency
    """

    # Template IDs for different versions
    TEMPLATES = {
        CDAVersion.R2_1: [
            TemplateConfig(
                root="2.16.840.1.113883.10.20.22.2.16",
                extension=None,
                description="Hospital Discharge Studies Summary Section",
            ),
        ],
        CDAVersion.R2_0: [
            TemplateConfig(
                root="2.16.840.1.113883.10.20.22.2.16",
                extension=None,
                description="Hospital Discharge Studies Summary Section",
            ),
        ],
    }

    def __init__(
        self,
        study_organizers: Sequence[DischargeStudyOrganizerProtocol],
        title: str = "Hospital Discharge Studies Summary",
        version: CDAVersion = CDAVersion.R2_1,
        **kwargs,
    ):
        """
        Initialize HospitalDischargeStudiesSummarySection builder.

        Args:
            study_organizers: List of discharge study organizers (study panels)
            title: Section title (default: "Hospital Discharge Studies Summary")
            version: C-CDA version (R2.1 or R2.0)
            **kwargs: Additional arguments passed to CDAElement
        """
        super().__init__(version=version, **kwargs)
        self.study_organizers = study_organizers
        self.title = title

    def build(self) -> etree.Element:
        """
        Build Hospital Discharge Studies Summary Section XML element.

        Returns:
            lxml Element for section
        """
        # Create section element
        section = etree.Element(f"{{{NS}}}section")

        # Add template IDs
        self.add_template_ids(section)

        # Add section code (11493-4 = Hospital Discharge Studies Summary)
        code_elem = Code(
            code="11493-4",
            system="LOINC",
            display_name="Hospital Discharge Studies Summary",
        ).to_element()
        code_elem.tag = f"{{{NS}}}code"
        section.append(code_elem)

        # Add title
        title_elem = etree.SubElement(section, f"{{{NS}}}title")
        title_elem.text = self.title

        # Add narrative text (HTML table)
        self._add_narrative(section)

        # Add entries with Result Organizers (reusing the pattern)
        for organizer in self.study_organizers:
            self._add_entry(section, organizer)

        return section

    def _add_narrative(self, section: etree._Element) -> None:
        """
        Add narrative text element with HTML table.

        Args:
            section: section element
        """
        # Create text element
        text = etree.SubElement(section, f"{{{NS}}}text")

        if not self.study_organizers:
            # No studies - add "No discharge studies available" paragraph
            paragraph = etree.SubElement(text, f"{{{NS}}}paragraph")
            paragraph.text = "No discharge studies available"
            return

        # Create table for studies
        table = etree.SubElement(text, f"{{{NS}}}table", border="1", width="100%")

        # Table header
        thead = etree.SubElement(table, f"{{{NS}}}thead")
        tr = etree.SubElement(thead, f"{{{NS}}}tr")

        headers = [
            "Study Panel",
            "Study",
            "Value",
            "Unit",
            "Interpretation",
            "Reference Range",
            "Date",
        ]
        for header_text in headers:
            th = etree.SubElement(tr, f"{{{NS}}}th")
            th.text = header_text

        # Table body
        tbody = etree.SubElement(table, f"{{{NS}}}tbody")

        for organizer_idx, organizer in enumerate(self.study_organizers, start=1):
            # Add each study in the organizer
            for study_idx, study in enumerate(organizer.studies, start=1):
                tr = etree.SubElement(tbody, f"{{{NS}}}tr")

                # Study panel name (only on first row of each panel)
                td_panel = etree.SubElement(tr, f"{{{NS}}}td")
                if study_idx == 1:
                    content_panel = etree.SubElement(
                        td_panel,
                        f"{{{NS}}}content",
                        ID=f"discharge-study-panel-{organizer_idx}",
                    )
                    content_panel.text = organizer.study_panel_name
                else:
                    td_panel.text = ""  # Empty for subsequent rows

                # Study name (with ID reference)
                td_study = etree.SubElement(tr, f"{{{NS}}}td")
                content_study = etree.SubElement(
                    td_study,
                    f"{{{NS}}}content",
                    ID=f"discharge-study-{organizer_idx}-{study_idx}",
                )
                content_study.text = study.study_name

                # Value
                td_value = etree.SubElement(tr, f"{{{NS}}}td")
                td_value.text = study.value

                # Unit
                td_unit = etree.SubElement(tr, f"{{{NS}}}td")
                if study.unit:
                    td_unit.text = study.unit
                else:
                    td_unit.text = "-"

                # Interpretation
                td_interpretation = etree.SubElement(tr, f"{{{NS}}}td")
                if study.interpretation:
                    td_interpretation.text = study.interpretation
                else:
                    td_interpretation.text = "-"

                # Reference Range
                td_range = etree.SubElement(tr, f"{{{NS}}}td")
                if study.reference_range_low or study.reference_range_high:
                    range_text = []
                    if study.reference_range_low:
                        range_text.append(study.reference_range_low)
                    if study.reference_range_high:
                        if range_text:
                            range_text.append(f" - {study.reference_range_high}")
                        else:
                            range_text.append(f"< {study.reference_range_high}")
                    if study.reference_range_unit:
                        range_text.append(f" {study.reference_range_unit}")
                    td_range.text = "".join(range_text)
                else:
                    td_range.text = "-"

                # Date (from organizer or study)
                td_date = etree.SubElement(tr, f"{{{NS}}}td")
                # Use organizer date for consistency
                td_date.text = organizer.effective_time.strftime("%Y-%m-%d")

    def _add_entry(
        self, section: etree._Element, organizer: DischargeStudyOrganizerProtocol
    ) -> None:
        """
        Add entry element with Result Organizer.

        This reuses the Result Organizer entry builder since discharge studies
        follow the same pattern as lab results.

        Args:
            section: section element
            organizer: Discharge study organizer data
        """
        # Create entry element
        entry = etree.SubElement(section, f"{{{NS}}}entry", typeCode="DRIV")

        # Create and add Result Organizer (reusing the pattern)
        # The DischargeStudyOrganizerProtocol is compatible with ResultOrganizerProtocol
        organizer_builder = ResultOrganizer(organizer, version=self.version)  # type: ignore
        entry.append(organizer_builder.to_element())
